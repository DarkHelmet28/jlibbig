%package "jlibbig.bigmc.lang";

%import "java.util.*";
%import "java.io.*";
%import "jlibbig.core.*";
%import "jlibbig.bigmc.*";

%class "BigMCParser";

%embed	{:		
		private Set<String> _outerNames;	//set of %outer
		private BigraphSystem _brs;
		

		/* Parse a string, creating a BRS and a set of Bigraphs from it.
		 * It use an extension of BigMC Language. 
		 * @param str
		 * 		string, in extended-BigMC syntax.
		 * @return BigraphParser.ExtendedBRS
		 *		class that contains a signature, a set of bigraphs and a map containing all reaction rules.
		 */
		BigraphSystem parse( String str ) throws IOException, Parser.Exception{
			_outerNames = new HashSet<>();		
			_brs = new BigraphSystem();

			BigMCLexer input = new BigMCLexer( new StringReader( str ) );
			parse(input);

			return _brs;
		}

		private void addName( String v ){
			_outerNames.add( v );
			_brs.addName( v );
		}

		private class ParsedBigraph{
			
			private BigraphBuilder bigraph;
			private Map<String , OuterName> outerNames;
			private Map<Site , Integer> siteNames;

			ParsedBigraph( Signature sig ){
				bigraph = new BigraphBuilder( sig );
				outerNames = new HashMap<>();
				siteNames = new HashMap<>();
			}
			
			//Note:	this method doesn't return a Milner's Ion (for bigraphs). It will add to the current bigraph one root with a node.
			//	This node have a site inside and, differently from Milner's definition of Ion, it can be linked to inner names.
			public void makeIon( String c , List<String> list ){
				if( bigraph.getSignature().getByName( c ) == null )
					throw new IllegalArgumentException( "Control \"" + c +"\" should be in the signature" );
				
				Node node = bigraph.addNode( c , bigraph.addRoot() );
				bigraph.addSite( node );

				if( list == null ) return;

				List<? extends Port> ports = node.getPorts();

				if( ports.size() < list.size() )
					throw new IllegalArgumentException( "Too many ports indicated ( " + list.size() + " ): control \"" + c +"\" has " + ports.size() + " port(s)" );

				Iterator<? extends Port> portIt = ports.iterator();
				for( String name : list ){
					if( name != null ){
						OuterName outer = outerNames.get( name );
						if( outer == null )
							outerNames.put( name , outer = bigraph.addOuterName() );
						bigraph.relink( (Point) portIt.next() , outer );
					}else
						portIt.next();
				}
			}

			/* Compose two ParsedBigraph. 
			 * @param pb
			 * 		ParsedBigraph to be innerComposed
			 */
			public void compose( ParsedBigraph pb ){
			
				if( pb.bigraph.getRoots().size() != 1 )
					throw new RuntimeException( "The juxtaposition (||) can only appear at the top level" );
				
				BigraphBuilder outer_juxt = new BigraphBuilder( bigraph.getSignature() );
				BigraphBuilder outer_comp = new BigraphBuilder( bigraph.getSignature() );
								
				for( Map.Entry<String , OuterName> o : pb.outerNames.entrySet() ){
					outer_juxt.addInnerName( o.getValue().getName() , outer_juxt.addOuterName( o.getValue().getName() ) );
					if( this.outerNames.containsKey( o.getKey() ) ){
						OuterName outer = outer_comp.addOuterName();
						outer_comp.addInnerName( o.getValue().getName() , outer );
						outer_comp.addInnerName( this.outerNames.put( o.getKey() , outer ).getName() , outer );
					}else
						outer_comp.addInnerName( o.getValue().getName() , outer_comp.addOuterName( o.getValue().getName() ) );
				}

				for( Map.Entry<String , OuterName> o : this.outerNames.entrySet() ){
					if( !pb.outerNames.containsKey( o.getKey() ) )
						outer_comp.addInnerName( o.getValue().getName() , outer_comp.addOuterName( o.getValue().getName() ) );
				}

				outer_comp.addSite( outer_comp.addRoot() );
				
				this.bigraph.leftJuxtapose( outer_juxt.makeBigraph() , true );
				this.bigraph.innerCompose( pb.bigraph.makeBigraph() , true );
				this.bigraph.outerCompose( outer_comp.makeBigraph() , true );

				//recalculate siteNames map (makeBigraph make a copy of the bigraph, so pointer will change)
				Site[] arr = new Site[ pb.bigraph.getSites().size() ];
				
				for( Site s : pb.bigraph.getSites() ){
					arr[ pb.bigraph.getSites().indexOf( s ) ] = s;
				}
				
				Map<Site , Integer> map = new HashMap<>();
				
				for( Site s : bigraph.getSites() )
						map.put( s , pb.siteNames.get( arr[ bigraph.getSites().indexOf( s ) ] ) );
				
				this.siteNames.putAll( map );
				
			}

			/* Juxtapose two ParsedBigraph. 
			 * @param pb
			 */
			public void juxtapose( ParsedBigraph pb ){
				
				BigraphBuilder outer_comp = new BigraphBuilder( bigraph.getSignature() );
				
				for( Map.Entry<String , OuterName> o : pb.outerNames.entrySet() ){
					if( this.outerNames.containsKey( o.getKey() ) ){
						OuterName outer = outer_comp.addOuterName();
						outer_comp.addInnerName( o.getValue().getName() , outer );
						outer_comp.addInnerName( this.outerNames.put( o.getKey() , outer).getName() , outer );
					}else{
						OuterName out = outer_comp.addOuterName( o.getValue().getName() );
						outer_comp.addInnerName( o.getValue().getName() , out );
						this.outerNames.put( o.getKey() , out );
					}
				}
				
				for( Map.Entry<String , OuterName> o : this.outerNames.entrySet() ){
					if( !pb.outerNames.containsKey( o.getKey() ) )
						outer_comp.addInnerName( o.getValue().getName() , outer_comp.addOuterName( o.getValue().getName() ) );
				}
				
				int siteSize = this.bigraph.getSites().size();
				this.bigraph.leftJuxtapose( pb.bigraph.makeBigraph() );
								
 				for( int i = 0 ; i < this.bigraph.getRoots().size() ; ++i )
					outer_comp.addSite( outer_comp.addRoot() );
 				
				this.bigraph.outerCompose( outer_comp.makeBigraph() );

				//recalculate siteNames map (makeBigraph make a copy of the bigraph, so pointer will change)
				Site[] arr = new Site[ pb.bigraph.getSites().size() ];
				
				for( Site s : pb.bigraph.getSites() ){
					arr[ pb.bigraph.getSites().indexOf( s ) ] = s;
				}
				
				Map<Site , Integer> map = new HashMap<>();
				
				for( Site s : bigraph.getSites() ){
					int index = bigraph.getSites().indexOf( s );
					if( index >= siteSize )
						map.put( s , pb.siteNames.get( arr[ index - siteSize ] ) );
				}
				
				this.siteNames.putAll( map );
				
			}

			/* Make a Bigraph out of a ParsedBigraph. 
			 * Edges must be managed before calling BigraphBuilder::makeBigraph()
			 *
			 * @return Bigraph
			 */
			public Bigraph switchToBigraph(){
				
				BigraphBuilder outer_comp = new BigraphBuilder( this.bigraph.getSignature() );
				
				for( Map.Entry<String , OuterName> o : this.outerNames.entrySet() ){
						outer_comp.addInnerName( o.getValue().getName() , outer_comp.addOuterName( o.getKey() ) );
				}
				
				for( int i = 0; i < this.bigraph.getRoots().size() ; ++i )
					outer_comp.addSite( outer_comp.addRoot() );

				this.bigraph.outerCompose( outer_comp.makeBigraph() );

				Bigraph b = this.bigraph.makeBigraph();
				
				Site[] arr = new Site[ b.getSites().size() ];
				int i = 0;
				for( Site s : b.getSites() ){
					arr[ b.getSites().indexOf( s ) ] = s;
				}
				Map<Site , Integer> map = new HashMap<>();
				
				for( Site s : bigraph.getSites() ){
					map.put( arr[ bigraph.getSites().indexOf(s) ] , this.siteNames.get(s) );
				}
				this.siteNames = map;
				
				return b;
			}

			/* Close all sites of a ParsedBigraph 
			 */
			public void groundPlaceGraph(){
				BigraphBuilder ground = new BigraphBuilder( this.bigraph.getSignature() );
				for( int i = 0; i < this.bigraph.getSites().size() ; ++i )
					ground.addRoot();
				this.bigraph.innerCompose( ground.makeBigraph() );
			}

			public void addSite( int n ){
				Site s = this.bigraph.addSite( this.bigraph.addRoot() );
				siteNames.put( s , n );
			}

			public Set<String> getNames(){
				return outerNames.keySet();
			}
				
		}
	
	:};

%init	{: 	
		_outerNames = new HashSet<>();
		_brs = new BigraphSystem();
	:};

%terminals CTRL, OUTERNAME, SEMICOLON, COLON, NIL, NUM, VARID, POINT, PIPE, DPIPE, UNLINKED, COMMA, SQOPEN, SQCLOSE, PAROPEN, PARCLOSE, INNERPLACE, REACT;

%typeof VARID , name  = "String";
%typeof NUM = "Integer";
%typeof CTRL = "Boolean";

%typeof definitions = "SignatureBuilder";

%typeof k , t  = "ParsedBigraph";

%typeof nms , nameli = "LinkedList<String>";


%left POINT;
%left PIPE;
%left DPIPE;

%goal start;

start	= definitionlist names	
	| names			
	;

names	= name names
	| reactions		
	;

name	= OUTERNAME VARID.v SEMICOLON	{: addName( v ); return new Symbol( null ); :}	
	;

reactions = reaction reactions
	| models		
	;

models	= 				
	| t.b SEMICOLON models	{:
					if( b.bigraph.getSites().size() != 0)
						throw new RuntimeException("Sites ($num) can only appear in reaction rules");
					if( !_outerNames.containsAll( b.getNames() ) )
						throw new RuntimeException("Free names can only appear in reaction rules");
					_brs.addBigraph( b.switchToBigraph() ); return new Symbol( null );
				:}
	;

definitionlist = CTRL.b VARID.v COLON NUM.n SEMICOLON definitions.sb 
			{:
				sb.put( v , b , n ); _brs.setSignature( sb.makeSignature() );
				return new Symbol( null ); 
			:}
	;

definitions = {: return new Symbol( new SignatureBuilder() ); :}
	| CTRL.b VARID.v COLON NUM.n SEMICOLON definitions.sb	{: sb.put( v , b , n ); return new Symbol( sb ); :}
	;

reaction = t.b1 REACT t.b2 SEMICOLON	{: 

						_brs.addReaction( new RedexBigraph( b1.switchToBigraph() , _outerNames , b1.siteNames ) , new RedexBigraph( b2.switchToBigraph() , _outerNames , b2.siteNames ) ); 
						return new Symbol( null ); 
					:}
	;

t	= k.b1 POINT t.b2		{: b1.compose( b2 ); return new Symbol( b1 ); :}
	| t.b1 PIPE t.b2		{: b1.juxtapose( b2 ); b1.bigraph.merge(); return new Symbol( b1 ); :}
	| t.b1 DPIPE t.b2		{: b1.juxtapose( b2 ); return new Symbol( b1 ); :}
	| INNERPLACE NUM.n		{: ParsedBigraph b = new ParsedBigraph( _brs.getSignature() ); b.addSite( n ); return new Symbol( b ); :}
	| k.b				{: b.groundPlaceGraph(); return new Symbol( b ); :}
	| NIL				{: ParsedBigraph b = new ParsedBigraph( _brs.getSignature() ); b.bigraph.addRoot(); return new Symbol( b ); :}
	| PAROPEN t.b PARCLOSE		{: return new Symbol( b ); :}
	;

k	= VARID.v SQOPEN nms.l SQCLOSE	{: ParsedBigraph b = new ParsedBigraph( _brs.getSignature() ); b.makeIon( v , l ); return new Symbol( b ); :}
	| VARID.v			{: ParsedBigraph b = new ParsedBigraph( _brs.getSignature() ); b.makeIon( v , null ); return new Symbol( b ); :}
	;

nms	= 			{: return new Symbol( null ); :}
	| nameli.l		{: return new Symbol( l ); :}
	;

nameli	= name.v		{: 
					List<String> list = new LinkedList<>(); 
					list.add( v ); return new Symbol( list ); 
				:}
	| name.v COMMA nameli.l	{: l.addFirst( v ); return new Symbol( l ); :}
	;

name	= VARID.v		{: return new Symbol( v ); :}
	| UNLINKED		{: return new Symbol( null ); :}
	;
